// Updated to reflect ESLint version 0.20.0, released 24th April, 2015.
// http://eslint.org/blog/2015/04/eslint-0.20.0-released

{

    "rules": {

        // Rules are documented at http://eslint.org/docs/rules
        // Possible values:
        //     0 - turn the rule off
        //     1 - turn the rule on as a warning (doesn't affect exit code)
        //     2 - turn the rule on as an error (exit code is 1 when triggered)
        //
        // Rules which support options other than 0, 1 or 2 are indicated by three asterisks (***) at the end of their comment.
        // Refer to the documentation at http://eslint.org/docs/rules/rule_name (e.g. http://eslint.org/docs/rules/comma-dangle)
        // for further usage details.
        // Rules denoted by 'NEW' at the start of their comment were added for this release.


        // Possible Errors
        // The following rules point out areas where you might have made mistakes.

        "comma-dangle": 0,                              // disallow or enforce trailing commas ***
        "no-cond-assign": 0,                            // disallow assignment in conditional expressions ***
        "no-console": 0,                                // disallow use of console
        "no-constant-condition": 0,                     // disallow use of constant expressions in conditions
        "no-control-regex": 0,                          // disallow control characters in regular expressions
        "no-debugger": 2,                               // disallow use of debugger
        "no-dupe-args": 0,                              // disallow duplicate arguments in functions
        "no-dupe-keys": 2,                              // disallow duplicate keys when creating object literals
        "no-duplicate-case": 0,                         // disallow a duplicate case label.
        "no-empty": 0,                                  // disallow empty statements
        "no-empty-class": 0,                            // disallow the use of empty character classes in regular expressions
        "no-ex-assign": 0,                              // disallow assigning to the exception in a catch block
        "no-extra-boolean-cast": 0,                     // disallow double-negation boolean casts in a boolean context
        "no-extra-parens": 2,                           // disallow unnecessary parentheses
        "no-extra-semi": 2,                             // disallow unnecessary semicolons
        "no-func-assign": 0,                            // disallow overwriting functions written as function declarations
        "no-inner-declarations": 0,                     // disallow function or variable declarations in nested blocks ***
        "no-invalid-regexp": 2,                         // disallow invalid regular expression strings in the RegExp constructor
        "no-irregular-whitespace": 2,                   // disallow irregular whitespace outside of strings and comments
        "no-negated-in-lhs": 0,                         // disallow negation of the left operand of an in expression
        "no-obj-calls": 0,                              // disallow the use of object properties of the global object (Math and JSON) as functions
        "no-regex-spaces": 0,                           // disallow multiple spaces in a regular expression literal
        "no-sparse-arrays": 0,                          // disallow sparse arrays
        "no-unreachable": 2,                            // disallow unreachable statements after a return, throw, continue, or break statement
        "use-isnan": 0,                                 // disallow comparisons with the value NaN
        "valid-jsdoc": 0,                               // Ensure JSDoc comments are valid ***
        "valid-typeof": 2,                              // Ensure that the results of typeof are compared against a valid string


        // Best Practices
        // These are rules designed to prevent you from making mistakes. They either prescribe a better way of doing something or help you avoid footguns.

        "block-scoped-var": 2,                          // treat var statements as if they were block scoped
        "complexity": 2,                                // specify the maximum cyclomatic complexity allowed in a program ***
        "consistent-return": 2,                         // require return statements to either always or never specify values
        "curly": 2,                                     // specify curly brace conventions for all control statements ***
        "default-case": 2,                              // require default case in switch statements
        "dot-notation": 2,                              // encourages use of dot notation whenever possible ***
        "eqeqeq": 2,                                    // require the use of === and !== ***
        "guard-for-in": 2,                              // make sure for-in loops have an if statement
        "no-alert": 2,                                  // disallow the use of alert, confirm, and prompt
        "no-caller": 2,                                 // disallow use of arguments.caller or arguments.callee
        "no-div-regex": 2,                              // disallow division operators explicitly at beginning of regular expression
        "no-else-return": 2,                            // disallow else after a return in an if
        "no-empty-label": 2,                            // disallow use of labels for anything other then loops and switches
        "no-eq-null": 2,                                // disallow comparisons to null without a type-checking operator
        "no-eval": 2,                                   // disallow use of eval()
        "no-extend-native": 2,                          // disallow adding to native types
        "no-extra-bind": 2,                             // disallow unnecessary function binding
        "no-fallthrough": 2,                            // disallow fallthrough of case statements
        "no-floating-decimal": 2,                       // disallow the use of leading or trailing decimal points in numeric literals
        "no-implied-eval": 2,                           // disallow use of eval()-like methods
        "no-iterator": 2,                               // disallow usage of __iterator__ property
        "no-labels": 2,                                 // disallow use of labeled statements
        "no-lone-blocks": 2,                            // disallow unnecessary nested blocks
        "no-loop-func": 2,                              // disallow creation of functions within loops
        "no-multi-spaces": 2,                           // disallow use of multiple spaces ***
        "no-multi-str": 2,                              // disallow use of multiline strings
        "no-native-reassign": 2,                        // disallow reassignments of native objects
        "no-new": 2,                                    // disallow use of new operator when not part of the assignment or comparison
        "no-new-func": 2,                               // disallow use of new operator for Function object
        "no-new-wrappers": 2,                           // disallows creating new instances of String,Number, and Boolean
        "no-octal": 2,                                  // disallow use of octal literals
        "no-octal-escape": 2,                           // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
        "no-param-reassign": 2,                         // disallow reassignment of function parameters
        "no-process-env": 2,                            // disallow use of process.env
        "no-proto": 2,                                  // disallow usage of __proto__ property
        "no-redeclare": 2,                              // disallow declaring the same variable more then once
        "no-return-assign": 2,                          // disallow use of assignment in return statement
        "no-script-url": 2,                             // disallow use of javascript: urls.
        "no-self-compare": 2,                           // disallow comparisons where both sides are exactly the same
        "no-sequences": 2,                              // disallow use of comma operator
        "no-throw-literal": 2,                          // restrict what can be thrown as an exception
        "no-unused-expressions": 2,                     // disallow usage of expressions in statement position
        "no-void": 2,                                   // disallow use of void operator
        "no-warning-comments": 2,                       // disallow usage of configurable warning terms in comments": 0,// e.g. TODO or FIXME ***
        "no-with": 2,                                   // disallow use of the with statement
        "radix": 2,                                     // require use of the second argument for parseInt()
        "vars-on-top": 2,                               // requires to declare all vars on top of their containing scope
        "wrap-iife": 2,                                 // require immediate function invocation to be wrapped in parentheses ***
        "yoda": 2,                                      // require or disallow Yoda conditions" ***


        // Strict Mode
        // These rules relate to using strict mode.

        "strict": 0,                                    // controls location of Use Strict Directives ***


        // Variables
        // These rules have to do with variable declarations.

        "no-catch-shadow": 2,                           // disallow the catch clause parameter name being the same as a variable in the outer scope
        "no-delete-var": 2,                             // disallow deletion of variables
        "no-label-var": 2,                              // disallow labels that share a name with a variable
        "no-shadow": 2,                                 // disallow declaration of variables already declared in the outer scope
        "no-shadow-restricted-names": 2,                // disallow shadowing of names such as arguments
        "no-undef": 2,                                  // disallow use of undeclared variables unless mentioned in a "global" block
        "no-undef-init": 2,                             // disallow use of undefined when initializing variables
        "no-undefined": 2,                              // disallow use of undefined variable
        "no-unused-vars": 2,                            // disallow declaration of variables that are not used in the code ***
        "no-use-before-define": 2,                      // disallow use of variables before they are defined ***


        // Node.js
        // These rules are specific to JavaScript running on Node.js.

        "handle-callback-err": 0,                       // enforces error handling in callbacks ***
        "no-mixed-requires": 0,                         // disallow mixing regular variable and require declarations ***
        "no-new-require": 0,                            // disallow use of new operator with the require function
        "no-path-concat": 0,                            // disallow string concatenation with __dirname and __filename
        "no-process-exit": 0,                           // disallow process.exit()
        "no-restricted-modules": 0,                     // restrict usage of specified node modules ***
        "no-sync": 0,                                   // disallow use of synchronous methods


        // Stylistic Issues
        // These rules are purely matters of style and are quite subjective.

        "indent": 0,                                    // this option sets a specific tab width for your code ***
        "brace-style": 0,                               // enforce one true brace style ***
        "camelcase": 0,                                 // require camel case names ***
        "comma-spacing": 0,                             // enforce spacing before and after comma ***
        "comma-style": 0,                               // enforce one true comma style ***
        "consistent-this": 0,                           // enforces consistent naming when capturing the current execution context ***
        "eol-last": 0,                                  // enforce newline at the end of file, with no multiple empty lines
        "func-names": 0,                                // require function expressions to have a name
        "func-style": 0,                                // enforces use of function declarations or expressions ***
        "key-spacing": 0,                               // enforces spacing between keys and values in object literal properties ***
        "max-nested-callbacks": 0,                      // specify the maximum depth callbacks can be nested ***
        "new-cap": 0,                                   // require a capital letter for constructors ***
        "new-parens": 0,                                // disallow the omission of parentheses when invoking a constructor with no arguments
        "newline-after-var": 0,                         // allow/disallow an empty newline after var statement ***
        "no-array-constructor": 0,                      // disallow use of the Array constructor
        "no-continue": 0,                               // disallow use of the continue statement
        "no-inline-comments": 0,                        // disallow comments inline after code
        "no-lonely-if": 0,                              // disallow if as the only statement in an else block
        "no-mixed-spaces-and-tabs": 0,                  // disallow mixed spaces and tabs for indentation ***
        "no-multiple-empty-lines": 0,                   // disallow multiple empty lines ***
        "no-nested-ternary": 0,                         // disallow nested ternary expressions
        "no-new-object": 0,                             // disallow use of the Object constructor
        "no-spaced-func": 0,                            // disallow space between function identifier and application
        "no-ternary": 0,                                // disallow the use of ternary operators
        "no-trailing-spaces": 2,                        // disallow trailing whitespace at the end of lines
        "no-underscore-dangle": 2,                      // disallow dangling underscores in identifiers
        "no-wrap-func": 0,                              // disallow wrapping of non-IIFE statements in parens
        "one-var": 0,                                   // allow or disallow one variable declaration per function ***
        "operator-assignment": 0,                       // require assignment operator shorthand where possible or prohibit it entirely ***
        "operator-linebreak": 0,                        // enforce operators to be placed before or after line breaks ***
        "padded-blocks": 0,                             // enforce padding within blocks ***
        "quote-props": [2, "as-needed"],                // require quotes around object literal property names ***
        "quotes": [2, "single", "avoid-escape"],        // specify whether backticks, double or single quotes should be used ***
        "semi": [2, "always"],                          // require or disallow use of semicolons instead of ASI ***
        "semi-spacing": 0,                              // enforce spacing before and after semicolons ***
        "sort-vars": 0,                                 // sort variables within the same declaration block ***
        "space-after-keywords": 0,                      // require a space after certain keywords ***
        "space-before-blocks": 0,                       // require or disallow space before blocks ***
        "space-before-function-paren": 0,               // require or disallow space before function opening parenthesis ***
        "space-in-brackets": 0,                         // require or disallow spaces inside brackets ***
        "space-in-parens": 0,                           // require or disallow spaces inside parentheses ***
        "space-infix-ops": 0,                           // require spaces around operators ***
        "space-return-throw-case": 0,                   // require a space after return, throw, and case
        "space-unary-ops": 0,                           // Require or disallow spaces before/after unary operators ***
        "spaced-line-comment": 0,                       // require or disallow a space immediately following the // in a line comment ***
        "wrap-regex": 0,                                // require regex literals to be wrapped in parentheses


        // ECMAScript 6
        // These rules are only relevant to ES6 environments and are off by default.

        "no-var": 2,                                    // require let or const instead of var
        "generator-star-spacing": 2,                    // enforce the spacing around the * in generator functions ***
        "object-shorthand": 2,                          // NEW: require method and property shorthand syntax for object literals ***


        // Legacy
        // The following rules are included for compatibility with JSHint and JSLint.
        // While the names of the rules may not match up with the JSHint/JSLint counterpart, the functionality is the same.

        "max-depth": 0,                                 // specify the maximum depth that blocks can be nested ***
        "max-len": 0,                                   // specify the maximum length of a line in your program ***
        "max-params": 0,                                // limits the number of parameters that can be used in the function declaration ***
        "max-statements": 0,                            // specify the maximum number of statement allowed in a function ***
        "no-bitwise": 0,                                // disallow use of bitwise operators
        "no-plusplus": 0                                // disallow use of unary operators, ++ and --

    },


    "ecmaFeatures": {

        // By default, ESLint supports only ECMAScript 5 syntax. You can override that setting to enable support for ECMAScript 6 as well as JSX.

        "arrowFunctions": true,                         //enable arrow functions
        "binaryLiterals": true,                         //enable binary literals
        "blockBindings": true,                          //enable let and const (aka block bindings)
        "classes": true,                                //enable classes
        "defaultParams": true,                          //enable default function parameters
        "destructuring": true,                          //enable destructuring
        "forOf": true,                                  //enable for-of loops
        "generators": true,                             //enable generators
        "modules": true,                                //enable modules and global strict mode
        "objectLiteralComputedProperties": true,        //enable computed object literal property names
        "objectLiteralDuplicateProperties": true,       //enable duplicate object literal properties in strict mode
        "objectLiteralShorthandMethods": true,          //enable object literal shorthand methods
        "objectLiteralShorthandProperties": true,       //enable object literal shorthand properties
        "octalLiterals": true,                          //enable octal literals
        "regexUFlag": true,                             //enable the regular expression u flag
        "regexYFlag": true,                             //enable the regular expression y flag
        "spread": true,                                 //enable the spread operator
        "superInFunctions": true,                       //enable super references inside of functions
        "templateStrings": true,                        //enable template strings
        "unicodeCodePointEscapes": true,                //enable code point escapes
        "globalReturn": false,                          //allow return statements in the global scope
        "jsx": false                                    //enable JSX
    },


    "env": {

        // An environment defines both global variables that are predefined as well as which rules should be on or off by default.

        "browser": false,                               //browser global variables
        "node": true,                                   //Node.js global variables and Node.js-specific rules
        "amd": false,                                   //defines require() and define() as global variables as per the amd spec
        "mocha": false,                                 //adds all of the Mocha testing global variables
        "jasmine": false,                               //adds all of the Jasmine testing global variables for version 1.3 and 2.0
        "phantomjs": false,                             //phantomjs global variables
        "jquery": false,                                //jquery global variables
        "prototypejs": false,                           //prototypejs global variables
        "shelljs": false,                               //shelljs global variables
        "meteor": false,                                //meteor global variables
        "es6": true                                     //enable all ECMAScript 6 features except for modules
    },


    "globals": {
        // If you are using global variables inside of a file then it's worthwhile to define those globals so that ESLint will not warn about their usage.
    },


    "plugins": [
        // ESLint supports the use of third-party plugins. Before using the plugin you have to install it using npm.
    ]

}
